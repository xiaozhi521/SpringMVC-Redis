一下内容仅仅个人归纳，可能会有遗漏！！！
映射处理 （）
    第一种：使用xml 配置文件
        xml 文件配置 -- 解析器：
              <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                  <property name="prefix" value="/WEB-INF/jsp/" />
                  <property name="suffix" value=".jsp" />
              </bean>
              prefix : 前缀
              suffix ：后缀
        java 代码
            @RequestMapping("/hello.mvc")
            public String printHello(ModelMap model) {
                model.addAttribute("message", "Hello Spring MVC Framework!");
                model.addAttribute("ee", "12121");
                return "hello";
            }
            请求路径：localhost:8099/hello.mvc
            返回的jsp是： /WEB-INF/jsp/hello.jsp

    第二种：使用 ModelAndView 对象
        该方式返回一个 ModelAndView 对象实例,该方式也依赖于第一种方式的 xml 配置文件
        @RequestMapping(value = "/student.mvc", method = RequestMethod.GET)
        public ModelAndView student() {
            Student student = new Student();
            student.setAge(23);
            student.setId(12);
            student.setName("qingFeng");
            return new ModelAndView("/student/modelAndView", "model", student);
        }
    第三种：不使用xml 配置文件，使用 forward: 或者 redirect: 为前缀拼接字符串
        如果以下代码想要和第一种效果相同 就需要返回   forward:/WEB-INF/jsp/hello.jsp  这样一个字符串
        @RequestMapping("/hello.mvc")
        public String printHello(ModelMap model) {
            model.addAttribute("message", "Hello Spring MVC Framework!");
            model.addAttribute("ee", "12121");
            return "forward:/WEB-INF/jsp/hello.jsp";
        }
参数控制
    参数返回到前台jsp页面也有三种方式：
        第一种 ：使用 request
            1、此方法在  com.controller.annotation.StudentController 中，并将其稍微修改
                @RequestMapping(value = "/addStudent.mvc", method = RequestMethod.GET)
                public String addstudent(HttpServletRequest request, HttpServletResponse response) {
                    request.setAttribute("message","这是使用配置文件方式,request");
                    return "/student/student";
                }
            2、使用  ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest() 方法获取 request
        第二种 ：使用 ModelMap 对象
             此方法在  com.controller.annotation.StudentController 中，并将其稍微修改
                 @RequestMapping(value = "/addStudent.mvc", method = RequestMethod.GET)
                 public String addstudent(ModelMap modelMap, HttpServletResponse response) {
                     modelMap.addAttribute("message1","这是使用配置文件方式,ModelMap");
                     return "/student/student";
                 }
        第三种 ：使用 ModelAndView 对象  ----------  代码不列举了，查看映射处理的第二种
                ModelAndView 有9个构造方法 可以灵活的设置 映射，返回前台的数据
                public ModelAndView(String viewName)   此构造方法只设置返回的文件路径，是一个字符串，去掉前缀和后缀
                public ModelAndView(View view)  此构造方法设置成 forward:
                public ModelAndView(String viewName, @Nullable Map<String, ?> model)  此构造接受一个字符串 ，和一个Map对象
                public ModelAndView(View view, @Nullable Map<String, ?> model)  此构造方法设置成 forward:  和一个Map对象
    **** 获取前台的参数 ****：
        就此一种，需要  @ModelAttribute  注解，接受前台的参数是 map 类型，ModelMap 继承了 Map，此处也可以写成
        public String addStudentOK(@ModelAttribute Student student,Map model) {}

        @RequestMapping(value = "/addStudentOK.mvc", method = RequestMethod.POST)
        public String addStudentOK(@ModelAttribute("SpringWeb")Student student,ModelMap model) {
            model.addAttribute("name", student.getName());
            model.addAttribute("age", student.getAge());
            model.addAttribute("id", student.getId());

            return "/student/result";
        }
接口处理 ---- 需要返回json数据
    只需要在方法上添加   @ResponseBody 注解，再将返回参数设置成需要的参数格式即可，常用的参数返回格式是 json
    @RequestMapping("/getMap.mvc")
    @ResponseBody
    public Map map() {
        Map map = new HashMap();
        map.put("name", "test");
        map.put("address", "bj");
        map.put("map", "this is map");
        return map;
    }
解析器
    <bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
       <property name="basename" value="views" />
       <property name="order" value="0" />
    </bean>
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <property name="prefix" value="/WEB-INF/jsp/" />
       <property name="suffix" value=".jsp" />
       <property name="order" value="1" />
    </bean>

    order属性定义了视图解析器的排序。0作为第一解析器，1作为下一解析器

    views.properties 内容：
    hello.(class)=org.springframework.web.servlet.view.JstlView
    hello.url=/WEB-INF/jsp/hello.jsp
